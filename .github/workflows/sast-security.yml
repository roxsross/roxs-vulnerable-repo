name: SAST Security Analysis

on:
  push:
    branches: [ vampi, main, master ]
  pull_request:
    branches: [ vampi, main, master ]
  schedule:
    # Ejecutar análisis semanal los lunes a las 2 AM UTC
    - cron: '0 2 * * 1'

permissions:
  actions: read
  contents: read
  security-events: write

jobs:
  bandit-security-scan:
    name: Bandit Security Scan
    runs-on: ubuntu-latest
    continue-on-error: true
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Bandit
      run: |
        pip install bandit[toml]
        
    - name: Run Bandit Security Scan
      run: |
        bandit -r . -f json -o bandit-report.json -ll -i --exit-zero
        echo "Bandit scan completed - issues found are expected in VAmPI (vulnerable by design)"
        
    - name: Convert Bandit results to SARIF
      run: |
        python3 -c "
        import json
        from datetime import datetime
        
        # Crear estructura SARIF básica
        sarif_template = {
            'version': '2.1.0',
            'runs': [{
                'tool': {
                    'driver': {
                        'name': 'Bandit',
                        'version': '1.8.6',
                        'informationUri': 'https://bandit.readthedocs.io/'
                    }
                },
                'results': []
            }]
        }
        
        try:
            with open('bandit-report.json', 'r') as f:
                bandit_data = json.load(f)
            
            # Convertir resultados de Bandit a SARIF
            for result in bandit_data.get('results', []):
                sarif_result = {
                    'ruleId': result.get('test_id', 'unknown'),
                    'message': {'text': result.get('issue_text', 'Security issue detected')},
                    'level': 'warning' if result.get('issue_severity', 'MEDIUM') == 'LOW' else 'error',
                    'locations': [{
                        'physicalLocation': {
                            'artifactLocation': {'uri': result.get('filename', 'unknown')},
                            'region': {'startLine': result.get('line_number', 1)}
                        }
                    }]
                }
                sarif_template['runs'][0]['results'].append(sarif_result)
        except Exception as e:
            print(f'Error processing Bandit results: {e}')
        
        # Escribir archivo SARIF
        with open('bandit-results.sarif', 'w') as f:
            json.dump(sarif_template, f, indent=2)
        " || echo "SARIF conversion completed"
        
    - name: Upload Bandit Results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'bandit-results.sarif'
        
    - name: Upload Bandit JSON Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-results
        path: bandit-report.json

  semgrep-scan:
    name: Semgrep Security Scan
    runs-on: ubuntu-latest
    continue-on-error: true
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Semgrep
      run: pip install semgrep
      
    - name: Run Semgrep
      run: |
        semgrep --config=p/security-audit --config=p/secrets --config=p/python --config=p/flask --config=p/owasp-top-ten --sarif --output=semgrep-results.sarif . || true
        semgrep --config=p/security-audit --config=p/secrets --config=p/python --config=p/flask --config=p/owasp-top-ten --json --output=semgrep-report.json . || true
        echo "Semgrep scan completed - issues found are expected in VAmPI (vulnerable by design)"
        
    - name: Upload Semgrep Results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'semgrep-results.sarif'
        
    - name: Upload Semgrep JSON Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: semgrep-results
        path: semgrep-report.json

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: python
        queries: security-extended,security-and-quality
        
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  safety-check:
    name: Safety Dependency Check
    runs-on: ubuntu-latest
    continue-on-error: true
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Safety
      run: pip install safety
      
    - name: Install sarif-om for Safety SARIF conversion
      run: pip install sarif-om
      
    - name: Check dependencies for vulnerabilities
      run: |
        safety scan -r requirements.txt --output json > safety-report.json || true
        echo "Safety scan completed - vulnerabilities found are expected in VAmPI (vulnerable by design)"
        
    - name: Convert Safety results to SARIF
      run: |
        python3 -c "
        import json
        import sarif_om as sarif
        from datetime import datetime
        
        # Leer resultados de Safety
        try:
            with open('safety-report.json', 'r') as f:
                safety_data = json.load(f)
        except:
            safety_data = {'vulnerabilities': []}
        
        # Crear reporte SARIF
        sarif_log = sarif.SarifLog(
            version='2.1.0',
            runs=[
                sarif.Run(
                    tool=sarif.Tool(
                        driver=sarif.ToolComponent(
                            name='Safety',
                            version='3.6.2',
                            information_uri='https://pyup.io/safety/'
                        )
                    ),
                    results=[]
                )
            ]
        )
        
        # Escribir SARIF
        with open('safety-results.sarif', 'w') as f:
            json.dump(sarif_log.to_dict(), f, indent=2)
        " || echo "SARIF conversion completed"
        
    - name: Upload Safety Results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'safety-results.sarif'
        
    - name: Upload Safety JSON Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: safety-results
        path: safety-report.json

  pip-audit:
    name: Pip-Audit Vulnerability Scan
    runs-on: ubuntu-latest
    continue-on-error: true
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install pip-audit
      run: pip install pip-audit
      
    - name: Run pip-audit
      run: |
        pip-audit -r requirements.txt --format=sarif --output=pip-audit-results.sarif || true
        pip-audit -r requirements.txt --format=json --output=pip-audit-report.json || true
        echo "pip-audit scan completed - vulnerabilities found are expected in VAmPI (vulnerable by design)"
        
    - name: Upload pip-audit Results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'pip-audit-results.sarif'
        
    - name: Upload pip-audit JSON Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: pip-audit-results
        path: pip-audit-report.json

  secrets-scan:
    name: GitLeaks Secrets Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Run GitLeaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  trivy-scan:
    name: Trivy Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Generate Trivy JSON report
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'json'
        output: 'trivy-report.json'
        
    - name: Upload Trivy Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: trivy-results
        path: trivy-report.json

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [bandit-security-scan, semgrep-scan, codeql-analysis, safety-check, pip-audit, secrets-scan, trivy-scan]
    if: always()
    
    steps:
    - name: Security Analysis Complete
      run: |
        echo "🔒 Análisis de seguridad SAST completado"
        echo "📊 Revisa los resultados en la pestaña Security del repositorio"
        echo "📋 Los artefactos con reportes detallados están disponibles en esta ejecución"