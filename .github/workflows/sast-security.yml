name: SAST Security Analysis

on:
  push:
    branches: [ vampi, main, master ]
  pull_request:
    branches: [ vampi, main, master ]
  schedule:
    # Ejecutar análisis semanal los lunes a las 2 AM UTC
    - cron: '0 2 * * 1'

jobs:
  bandit-security-scan:
    name: Bandit Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Bandit
      run: |
        pip install bandit[toml]
        
    - name: Run Bandit Security Scan
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -f txt
        
    - name: Upload Bandit Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-results
        path: bandit-report.json

  semgrep-scan:
    name: Semgrep Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/python
          p/flask
          p/owasp-top-ten
        generateSarif: "1"
        
    - name: Upload Semgrep Results to GitHub
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: semgrep.sarif

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: python
        queries: security-extended,security-and-quality
        
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  safety-check:
    name: Safety Dependency Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Safety
      run: pip install safety
      
    - name: Check dependencies for vulnerabilities
      run: |
        safety check -r requirements.txt --json --output safety-report.json || true
        safety check -r requirements.txt
        
    - name: Upload Safety Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: safety-results
        path: safety-report.json

  pip-audit:
    name: Pip-Audit Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install pip-audit
      run: pip install pip-audit
      
    - name: Run pip-audit
      run: |
        pip-audit -r requirements.txt --format=json --output=pip-audit-report.json || true
        pip-audit -r requirements.txt
        
    - name: Upload pip-audit Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: pip-audit-results
        path: pip-audit-report.json

  secrets-scan:
    name: GitLeaks Secrets Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Run GitLeaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  trivy-scan:
    name: Trivy Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Generate Trivy JSON report
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'json'
        output: 'trivy-report.json'
        
    - name: Upload Trivy Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: trivy-results
        path: trivy-report.json

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [bandit-security-scan, semgrep-scan, codeql-analysis, safety-check, pip-audit, secrets-scan, trivy-scan]
    if: always()
    
    steps:
    - name: Security Analysis Complete
      run: |
        echo "🔒 Análisis de seguridad SAST completado"
        echo "📊 Revisa los resultados en la pestaña Security del repositorio"
        echo "📋 Los artefactos con reportes detallados están disponibles en esta ejecución"