name: WIRU Serverless POC

on:
  push:
  workflow_call:
    inputs:
      app-name:
        description: 'Application name'
        required: false
        type: string
        default: 'my-app'
      stage:
        description: 'Stage: dev | stg'
        required: true
        type: string
      version:
        description: 'App version (semver, opcional)'
        required: false
        type: string
        default: ''
      do-remove:
        description: 'Execute serverless remove'
        required: false
        type: boolean
        default: false
      do-rollback:
        description: 'Execute serverless rollback'
        required: false
        type: boolean
        default: false
      rollback-to:
        description: 'Rollback timestamp/ID (optional)'
        required: false
        type: string
        default: ''

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ inputs.app-name }}-${{ inputs.stage }}
  cancel-in-progress: false

env:
  APP_NAME: ${{ inputs.app-name }}
  STAGE: ${{ inputs.stage }}

jobs:
  # === init ===
  init:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: install dependencies
        run: |
          echo "=========================================="
          echo "üöÄ INIT ‚Äì install dependencies"
          echo "=========================================="
          if [ -f "package.json" ]; then
            npm ci --silent || true
          fi
          npm i -g serverless >/dev/null 2>&1 || true
          echo "‚úÖ Entorno listo"

  # === check (solo Version Checks) ===
  check-version:
    needs: init
    runs-on: ubuntu-latest
    steps:
      - name: Version Checks (semver)
        run: |
          echo "=========================================="
          echo "üîç CHECK ‚Äì Version Checks"
          echo "=========================================="
          echo "Stage: ${STAGE}"
          if [ "${STAGE}" = "prod" ]; then
            echo "‚ùå Deploy a PROD no permitido en esta POC"
            exit 1
          fi
          if [ -n "${{ inputs.version }}" ]; then
            VERSION="${{ inputs.version }}"
            if echo "$VERSION" | grep -Eq '^[0-9]+\.[0-9]+\.[0-9]+([\-+][A-Za-z0-9\.-]+)?$'; then
              echo "‚úÖ Versi√≥n v√°lida: $VERSION"
            else
              echo "‚ùå Versi√≥n inv√°lida (use semver, ej: 1.2.3)"
              exit 1
            fi
          else
            echo "‚ÑπÔ∏è Sin versi√≥n provista, continuo‚Ä¶"
          fi
          echo "‚úÖ Checks OK"

  # === quality (matrix: unit tests | sonar) ===
  quality:
    needs: check-version
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [unit, sonar]
    env:
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}   # ej: https://sonar.nx/staging
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }} # opcional si no est√° en sonar-project.properties
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node (for unit & sonar)
        if: matrix.target == 'unit' || matrix.target == 'sonar'
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Unit Tests (matrix: unit)
        if: matrix.target == 'unit'
        run: |
          echo "=========================================="
          echo "üß™ TEST ‚Äì Unit (matrix)"
          echo "=========================================="
          if [ -f "package.json" ]; then
            npm ci --silent || true
            npm test --silent || echo "‚ÑπÔ∏è Tests no configurados, continuo‚Ä¶"
          else
            echo "‚ÑπÔ∏è No se detect√≥ Node; smoke test"
            echo "ok"
          fi
          echo "‚úÖ Unit tests completados"

      - name: Sonar Analysis (matrix: sonar)
        if: matrix.target == 'sonar'
        run: |
          echo "=========================================="
          echo "üìä SONAR ‚Äì Static Analysis (matrix)"
          echo "=========================================="
          if [ -z "${SONAR_HOST_URL}" ] || [ -z "${SONAR_TOKEN}" ]; then
            echo "‚ùå Faltan secrets SONAR_HOST_URL / SONAR_TOKEN"
            exit 1
          fi
          # Si ten√©s sonar-scanner instalado en el repo, usalo; si no, descargar binario temporal:
          SCANNER_DIR="$RUNNER_TEMP/sonar-scanner"
          mkdir -p "$SCANNER_DIR"
          curl -sLo "$SCANNER_DIR/sonar-scanner.zip" https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-5.0.1.3006-linux.zip || true
          unzip -qq "$SCANNER_DIR/sonar-scanner.zip" -d "$SCANNER_DIR" || true
          export PATH="$SCANNER_DIR/sonar-scanner-5.0.1.3006-linux/bin:$PATH"

          # Generar cobertura si existe configuraci√≥n (opcional)
          if [ -f "package.json" ]; then
            npm ci --silent || true
            npm run test:coverage --silent || echo "‚ÑπÔ∏è Sin script coverage, continuo‚Ä¶"
          fi

          # Ejecutar an√°lisis (usa sonar-project.properties si est√° presente)
          sonar-scanner \
            -Dsonar.host.url="${SONAR_HOST_URL}" \
            -Dsonar.login="${SONAR_TOKEN}" \
            -Dsonar.projectKey="${SONAR_PROJECT_KEY:-${APP_NAME}}" || true

          echo "‚úÖ Sonar analysis ejecutado (staging)"
          echo ""

  # === deploy (serverless) ===
  deploy:
    needs: quality
    if: ${{ !inputs.do-remove && !inputs.do-rollback }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.stage }}
    steps:
      - uses: actions/checkout@v4
      - name: Deploy Serverless
        run: |
          echo "=========================================="
          echo "üöÄ DEPLOY ‚Äì Serverless (${STAGE})"
          echo "=========================================="
          echo "App: ${APP_NAME}"
          # Ejemplo:
          # serverless deploy --stage ${STAGE}
          echo "üåê URL (ejemplo): https://${STAGE}.example.com/${APP_NAME}"
          echo "‚úÖ Deploy ${STAGE} OK"

  # === remove (serverless) ===
  remove:
    needs: quality
    if: ${{ inputs.do-remove }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.stage }}
    steps:
      - uses: actions/checkout@v4
      - name: Remove Serverless
        run: |
          echo "=========================================="
          echo "üßπ REMOVE ‚Äì Serverless (${STAGE})"
          echo "=========================================="
          # serverless remove --stage ${STAGE}
          echo "‚úÖ Remove ${STAGE} OK"

  # === rollback (serverless) ===
  rollback:
    needs: quality
    if: ${{ inputs.do-rollback }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.stage }}
    steps:
      - uses: actions/checkout@v4
      - name: Rollback Serverless
        run: |
          echo "=========================================="
          echo "üõ°Ô∏è  ROLLBACK ‚Äì Serverless (${STAGE})"
          echo "=========================================="
          RB_TO="${{ inputs.rollback-to }}"
          if [ -n "${RB_TO}" ]; then
            echo "‚è™ Rollback a: ${RB_TO}"
            # serverless rollback --stage ${STAGE} --timestamp ${RB_TO}
          else
            echo "‚è™ Rollback al √∫ltimo deployment"
            # serverless rollback --stage ${STAGE}
          fi
          echo "‚úÖ Rollback ${STAGE} OK"
