name: WIRU Serverless POC (matrix tests + sonar, clean flow)

on:
  push:
  workflow_dispatch:
  workflow_call:
    inputs:
      app-name:
        description: 'Application name'
        required: false
        type: string
        default: 'my-app'
      stage:
        description: 'Stage: dev | stg'
        required: true
        type: string
      version:
        description: 'App version (semver, optional)'
        required: false
        type: string
        default: ''
      do-remove:
        description: 'Execute serverless remove (manual only)'
        required: false
        type: boolean
        default: false
      do-rollback:
        description: 'Execute serverless rollback (manual only)'
        required: false
        type: boolean
        default: false
      rollback-to:
        description: 'Rollback timestamp/ID (optional)'
        required: false
        type: string
        default: ''

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.event.inputs.app-name || 'default' }}-${{ github.event.inputs.stage || 'dev' }}
  cancel-in-progress: false

defaults:
  run:
    shell: bash

env:
  APP_NAME: ${{ github.event.inputs.app-name || 'my-app' }}
  STAGE: ${{ github.event.inputs.stage || 'dev' }}
  INPUT_VERSION: ${{ github.event.inputs.version || '' }}

jobs:
  # ───────────────────────────── INIT ─────────────────────────────
  wiru_init:
    name: "🧰 init"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install deps & serverless
        run: |
          if [ -f package.json ]; then 
            npm ci --silent
          fi
          npm i -g serverless

  # ─────────────────────── VERSION CHECK (dep INIT) ───────────────────────
  wiru_versioncheck:
    name: "🏷️ version-check"
    needs: wiru_init
    runs-on: ubuntu-latest
    steps:
      - name: Validate semver (optional)
        run: |
          VERSION="${{ env.INPUT_VERSION }}"
          if [ -n "${VERSION}" ]; then
            if echo "${VERSION}" | grep -Eq '^[0-9]+\.[0-9]+\.[0-9]+([-+][A-Za-z0-9\.:-]+)?$'; then
              echo "✅ Version ok: ${VERSION}"
            else
              echo "❌ Invalid semver (use 1.2.3 or 1.2.3-alpha.1)"
              exit 1
            fi
          else
            echo "ℹ️ No version provided; continuing"
          fi

  # ───────────────── UNIT TESTS (MATRIX) dep INIT ─────────────────
  wtest_unit:
    name: "🧪 unit-test (node ${{ matrix.node }})"
    needs: wiru_init
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node: [20]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'
      - name: Install dependencies
        run: |
          if [ -f package.json ]; then
            npm ci --silent
          else
            echo "⚠️ No package.json found"
            exit 0
          fi
      - name: Run tests with coverage
        run: |
          npm test -- --coverage --coverageReporters=lcov 2>&1 || {
            echo "⚠️ Tests failed or not configured"
            exit 0
          }
      - name: Upload coverage
        if: hashFiles('coverage/lcov.info') != ''
        uses: actions/upload-artifact@v4
        with:
          name: coverage-lcov-node-${{ matrix.node }}
          path: coverage/lcov.info
          retention-days: 1

  # ───────────────── SONAR (MATRIX) dep UNIT ─────────────────
  wtest_sonar:
    name: "📊 sonar (${{ matrix.scanner }})"
    needs: wtest_unit
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        scanner: [sonarqube]
    env:
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Necesario para Sonar
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Download coverage
        uses: actions/download-artifact@v4
        with:
          name: coverage-lcov-node-20
          path: coverage
        continue-on-error: true
      - name: Sonar Scanner
        run: |
          if [ -z "${SONAR_HOST_URL}" ] || [ -z "${SONAR_TOKEN}" ]; then
            echo "⚠️ Missing SONAR secrets - skipping analysis"
            exit 0
          fi
          
          SCANNER_VERSION="5.0.1.3006"
          SCANNER_DIR="${RUNNER_TEMP}/sonar-scanner"
          mkdir -p "${SCANNER_DIR}"
          
          echo "📥 Downloading Sonar Scanner ${SCANNER_VERSION}..."
          curl -sLo "${SCANNER_DIR}/scanner.zip" \
            "https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-${SCANNER_VERSION}-linux.zip"
          
          unzip -qq "${SCANNER_DIR}/scanner.zip" -d "${SCANNER_DIR}"
          export PATH="${SCANNER_DIR}/sonar-scanner-${SCANNER_VERSION}-linux/bin:${PATH}"

          PROJECT_KEY="${SONAR_PROJECT_KEY:-${APP_NAME}}"
          
          echo "🔍 Running Sonar analysis for project: ${PROJECT_KEY}"
          sonar-scanner \
            -Dsonar.host.url="${SONAR_HOST_URL}" \
            -Dsonar.login="${SONAR_TOKEN}" \
            -Dsonar.projectKey="${PROJECT_KEY}" \
            -Dsonar.sources=. \
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info

  # ─────────────────────────── DEPLOY dep SONAR ───────────────────────────
  wdeploy_deploy:
    name: "🚀 deploy to ${{ github.event.inputs.stage || 'dev' }}"
    needs: wtest_sonar
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.stage || 'dev' }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install dependencies
        run: |
          if [ -f package.json ]; then
            npm ci --silent
          fi
          npm i -g serverless
      - name: Deploy Serverless
        run: |
          echo "🚀 Deploying ${APP_NAME} to ${STAGE}..."
          # serverless deploy --stage "${STAGE}" --verbose
          echo "✅ Deployment complete!"
          echo "🌐 URL: https://${STAGE}.example.com/${APP_NAME}"

  # ─────────────── REMOVE (manual) dep SONAR ───────────────
  wdeploy_remove:
    name: "🧹 remove from ${{ github.event.inputs.stage }}"
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.do-remove == 'true'
    needs: wtest_sonar
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.stage }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install serverless
        run: npm i -g serverless
      - name: Remove Serverless
        run: |
          echo "🧹 Removing stack from ${STAGE}..."
          # serverless remove --stage "${STAGE}" --verbose
          echo "✅ Stack removed successfully"

  # ─────────────── ROLLBACK (manual) dep SONAR ───────────────
  wdeploy_rollback:
    name: "⏪ rollback on ${{ github.event.inputs.stage }}"
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.do-rollback == 'true'
    needs: wtest_sonar
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.stage }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install serverless
        run: npm i -g serverless
      - name: Rollback Serverless
        run: |
          echo "⏪ Rolling back ${STAGE}..."
          RB_TO="${{ github.event.inputs.rollback-to }}"
          if [ -n "${RB_TO}" ]; then
            echo "📍 Rollback to: ${RB_TO}"
            # serverless rollback --stage "${STAGE}" --timestamp "${RB_TO}" --verbose
          else
            echo "📍 Rollback to last deployment"
            # serverless rollback --stage "${STAGE}" --verbose
          fi
          echo "✅ Rollback complete"
