name: WIRU Serverless POC (matrix tests + sonar, clean flow)

on:
  push:
  workflow_dispatch:
  workflow_call:
    inputs:
      app-name:
        description: 'Application name'
        required: false
        type: string
        default: 'my-app'
      stage:
        description: 'Stage: dev | stg'
        required: true
        type: string
      version:
        description: 'App version (semver, optional)'
        required: false
        type: string
        default: ''
      do-remove:
        description: 'Execute serverless remove (manual only)'
        required: false
        type: boolean
        default: false
      do-rollback:
        description: 'Execute serverless rollback (manual only)'
        required: false
        type: boolean
        default: false
      rollback-to:
        description: 'Rollback timestamp/ID (optional)'
        required: false
        type: string
        default: ''

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.event.inputs.app-name || 'default' }}-${{ github.event.inputs.stage || 'dev' }}
  cancel-in-progress: false

defaults:
  run:
    shell: bash

env:
  APP_NAME: ${{ github.event.inputs.app-name || 'my-app' }}
  STAGE: ${{ github.event.inputs.stage || 'dev' }}
  INPUT_VERSION: ${{ github.event.inputs.version || '' }}

jobs:
  # ───────────────────────────── INIT ─────────────────────────────
  wiru_init:
    name: "🧰 init"
    runs-on: ubuntu-latest
    steps:
      - name: Simulate init
        run: |
          echo "🧰 Initializing workflow..."
          echo "APP_NAME: ${APP_NAME}"
          echo "STAGE: ${STAGE}"
          echo "VERSION: ${INPUT_VERSION}"

  # ─────────────────────── VERSION CHECK (dep INIT) ───────────────────────
  wiru_versioncheck:
    name: "🏷️ version-check"
    needs: wiru_init
    runs-on: ubuntu-latest
    steps:
      - name: Validate semver (optional)
        run: |
          echo "🏷️ Checking version..."
          VERSION="${INPUT_VERSION}"
          if [ -n "${VERSION}" ]; then
            if echo "${VERSION}" | grep -Eq '^[0-9]+\.[0-9]+\.[0-9]+([-+][A-Za-z0-9\.:-]+)?$'; then
              echo "✅ Version ok: ${VERSION}"
            else
              echo "❌ Invalid semver (use 1.2.3 or 1.2.3-alpha.1)"
              exit 1
            fi
          else
            echo "ℹ️ No version provided; continuing"
          fi

  # ───────────────── UNIT TESTS (MATRIX) dep INIT ─────────────────
  wtest_unit:
    name: "🧪 unit-test (node ${{ matrix.node }})"
    needs: wiru_init
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node: [20]
    steps:
      - name: Simulate unit tests
        run: |
          echo "🧪 Running unit tests on Node ${{ matrix.node }}..."
          echo "Installing dependencies..."
          echo "Running tests with coverage..."
          echo "✅ Tests passed!"
          echo "📊 Coverage generated"

  # ───────────────── SONAR (MATRIX) dep UNIT ─────────────────
  wtest_sonar:
    name: "📊 sonar (${{ matrix.scanner }})"
    needs: wtest_unit
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        scanner: [sonarqube]
    steps:
      - name: Simulate Sonar analysis
        run: |
          echo "📊 Running Sonar analysis (${{ matrix.scanner }})..."
          echo "Downloading Sonar Scanner..."
          echo "Analyzing code quality..."
          echo "Uploading results to SonarQube..."
          echo "✅ Sonar analysis complete!"

  # ─────────────────────────── DEPLOY dep SONAR ───────────────────────────
  wdeploy_deploy:
    name: "🚀 deploy to ${{ github.event.inputs.stage || 'dev' }}"
    needs: wtest_sonar
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.stage || 'dev' }}
    steps:
      - name: Simulate deployment
        run: |
          echo "🚀 Deploying ${APP_NAME} to ${STAGE}..."
          echo "serverless deploy --stage ${STAGE}"
          echo "✅ Deployment complete!"
          echo "🌐 URL: https://${STAGE}.example.com/${APP_NAME}"

  # ─────────────── REMOVE (manual) dep SONAR ───────────────
  wdeploy_remove:
    name: "🧹 remove from ${{ github.event.inputs.stage }}"
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.do-remove == 'true'
    needs: wtest_sonar
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.stage }}
    steps:
      - name: Simulate removal
        run: |
          echo "🧹 Removing ${APP_NAME} from ${STAGE}..."
          echo "serverless remove --stage ${STAGE}"
          echo "✅ Stack removed successfully"

  # ─────────────── ROLLBACK (manual) dep SONAR ───────────────
  wdeploy_rollback:
    name: "⏪ rollback on ${{ github.event.inputs.stage }}"
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.do-rollback == 'true'
    needs: wtest_sonar
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.stage }}
    steps:
      - name: Simulate rollback
        run: |
          echo "⏪ Rolling back ${APP_NAME} on ${STAGE}..."
          RB_TO="${{ github.event.inputs.rollback-to }}"
          if [ -n "${RB_TO}" ]; then
            echo "📍 Rollback to: ${RB_TO}"
            echo "serverless rollback --stage ${STAGE} --timestamp ${RB_TO}"
          else
            echo "📍 Rollback to last deployment"
            echo "serverless rollback --stage ${STAGE}"
          fi
          echo "✅ Rollback complete"
