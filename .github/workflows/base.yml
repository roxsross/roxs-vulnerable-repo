name: WIRU Serverless POC

on:
  push:
  workflow_call:
    inputs:
      app-name:
        description: 'Application name'
        required: false
        type: string
        default: 'my-app'
      stage:
        description: 'Stage: dev | stg'
        required: true
        type: string
      version:
        description: 'App version (semver, optional)'
        required: false
        type: string
        default: ''
      do-remove:
        description: 'Execute serverless remove'
        required: false
        type: boolean
        default: false
      do-rollback:
        description: 'Execute serverless rollback'
        required: false
        type: boolean
        default: false
      rollback-to:
        description: 'Rollback timestamp/ID (optional)'
        required: false
        type: string
        default: ''

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ inputs.app-name }}-${{ inputs.stage }}
  cancel-in-progress: false

env:
  APP_NAME: ${{ inputs.app-name }}
  STAGE: ${{ inputs.stage }}
  INPUT_VERSION: ${{ inputs.version }}

jobs:
  wiru:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: [unit, sonar]
    env:
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        if: ${{ matrix.target == 'init' || matrix.target == 'wversion }}
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Unit Tests
        if: ${{ matrix.target == 'init' }}
        shell: bash
        run: |
          echo "TEST - unit"
          echo "TEST ok"

      - name: Sonar Analysis
        if: ${{ matrix.target == 'wversion' }}
        shell: bash
        run: |
          echo "SONAR - analysis"
          echo "SONAR ok"

  wtest:
    needs: wiru
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: [unit, sonar]
    env:
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        if: ${{ matrix.target == 'unit-test' || matrix.target == 'sonarqube' }}
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Unit Tests
        if: ${{ matrix.target == 'unit-test' }}
        shell: bash
        run: |
          echo "TEST - unit"
          echo "TEST ok"

      - name: Sonar Analysis
        if: ${{ matrix.target == 'sonarqube' }}
        shell: bash
        run: |
          echo "SONAR - analysis"
          echo "SONAR ok"

  # Matrix delivery: deploy | remove | rollback
  wdeploy:
    needs: wtest
    runs-on: ubuntu-latest
    environment: ${{ inputs.stage }}
    strategy:
      fail-fast: false
      matrix:
        action: [deploy, remove, rollback]
    steps:
      - uses: actions/checkout@v4

      # DEPLOY (solo si action == deploy y no hay flags de remove/rollback)
      - name: Deploy Serverless
        if: ${{ matrix.action == 'deploy' && !inputs.do-remove && !inputs.do-rollback }}
        shell: bash
        run: |
          echo "DEPLOY - serverless ${STAGE}"
          echo "App: ${APP_NAME}"
          # serverless deploy --stage "${STAGE}"
          echo "URL example: https://${STAGE}.example.com/${APP_NAME}"
          echo "DEPLOY ok"

      # REMOVE (solo si action == remove y do-remove = true)
      - name: Remove Serverless
        if: ${{ matrix.action == 'remove' && inputs.do-remove }}
        shell: bash
        run: |
          echo "REMOVE - serverless ${STAGE}"
          # serverless remove --stage "${STAGE}"
          echo "REMOVE ok"

      # ROLLBACK (solo si action == rollback y do-rollback = true)
      - name: Rollback Serverless
        if: ${{ matrix.action == 'rollback' && inputs.do-rollback }}
        shell: bash
        run: |
          echo "ROLLBACK - serverless ${STAGE}"
          RB_TO="${{ inputs.rollback-to }}"
          if [ -n "${RB_TO}" ]; then
            echo "Rollback to: ${RB_TO}"
            # serverless rollback --stage "${STAGE}" --timestamp "${RB_TO}"
          else
            echo "Rollback to last deployment"
            # serverless rollback --stage "${STAGE}"
          fi
          echo "ROLLBACK ok"
