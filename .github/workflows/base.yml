name: WIRU Serverless POC

on:
  push:
  workflow_dispatch:
  workflow_call:
    inputs:
      app-name:
        description: "Application name"
        required: false
        type: string
        default: "my-app"
      stage:
        description: "Stage: dev | stg"
        required: true
        type: string
      version:
        description: "App version (semver, optional)"
        required: false
        type: string
        default: ""
      do-remove:
        description: "Execute serverless remove (manual only)"
        required: false
        type: boolean
        default: false
      do-rollback:
        description: "Execute serverless rollback (manual only)"
        required: false
        type: boolean
        default: false
      rollback-to:
        description: "Rollback timestamp/ID (optional)"
        required: false
        type: string
        default: ""

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ inputs.app-name }}-${{ inputs.stage }}
  cancel-in-progress: false

jobs:
  init:
    name: "winstall"
    runs-on: ubuntu-latest
    steps:
      - name: Simulate init
        run: |
          echo "üß∞ Initializing workflow..."
          echo "APP_NAME: ${{ inputs.app-name }}"
          echo "STAGE: ${{ inputs.stage }}"
          echo "VERSION: ${{ inputs.version }}"

  wversion:
    name: "wversion"
    needs: init
    runs-on: ubuntu-latest
    steps:
      - name: Validate version
        run: |
          echo "üè∑Ô∏è Checking version..."
          if [ -n "${{ inputs.version }}" ]; then
            if echo "${{ inputs.version }}" | grep -Eq '^[0-9]+\.[0-9]+\.[0-9]+([-+][A-Za-z0-9\.:-]+)?$'; then
              echo "‚úÖ Version OK: ${{ inputs.version }}"
            else
              echo "‚ùå Invalid version format"; exit 1
            fi
          else
            echo "No version provided, skipping check."

  wtest:
    name: "wtest"
    needs: [init, wversion]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Run Tests
        run: |
          echo "üß™ Running unit tests..."
          # npm ci && npm test
      - name: Upload Coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 1

  wsonar:
    name: "wsonar"
    needs: wtest
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          echo "üìä Running SonarQube analysis..."
          # sonar-scanner \
          #   -Dsonar.projectKey=my-project \
          #   -Dsonar.sources=src \
          #   -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info

  wdeploy_deploy:
    name: "wsls deploy"
    needs: [wtest, wsonar]
    runs-on: ubuntu-latest
    environment: ${{ inputs.stage }}
    steps:
      - uses: actions/checkout@v4
      - name: Deploy Serverless
        run: |
          echo "üöÄ DEPLOY ${{ inputs.stage }} - ${{ inputs.app-name }}"
          # serverless deploy --stage "${{ inputs.stage }}"
          echo "URL: https://${{ inputs.stage }}.example.com/${{ inputs.app-name }}"

  wdeploy_rollback:
    name: "wsls rollback"
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.do-rollback }}
    needs: [wtest, wsonar]
    runs-on: ubuntu-latest
    environment: ${{ inputs.stage }}
    steps:
      - uses: actions/checkout@v4
      - name: Rollback Serverless
        run: |
          echo "‚è™ ROLLBACK ${{ inputs.stage }}"
          if [ -n "${{ inputs.rollback-to }}" ]; then
            echo "Rollback to: ${{ inputs.rollback-to }}"
            # serverless rollback --stage "${{ inputs.stage }}" --timestamp "${{ inputs.rollback-to }}"
          else
            echo "Rollback to last deployment"
            # serverless rollback --stage "${{ inputs.stage }}"
          fi

  wdeploy_remove:
    name: "wsls remove"
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.do-remove }}
    needs: [wtest, wsonar]
    runs-on: ubuntu-latest
    environment: ${{ inputs.stage }}
    steps:
      - uses: actions/checkout@v4
      - name: Remove Serverless
        run: |
          echo "üßπ REMOVE ${{ inputs.stage }}"
          # serverless remove --stage "${{ inputs.stage }}"
