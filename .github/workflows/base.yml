name: WIRU Base Pipeline POC

on:
  push:
  workflow_call:
    inputs:
      environments:
        description: 'Environments: full-with-drp | full | mid | minimal'
        required: true
        type: string
      app-name:
        description: 'Application name'
        required: false
        type: string
        default: 'my-app'
      deploy-strategy:
        description: 'Strategy: rolling | blue-green'
        required: false
        type: string
        default: 'rolling'

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ inputs.app-name }}
  cancel-in-progress: false

env:
  APP_NAME: ${{ inputs.app-name }}
  DEPLOY_STRATEGY: ${{ inputs.deploy-strategy }}

jobs:
  # === WIRU: INIT ===
  init:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Inicializar entorno (INIT)
        run: |
          echo "=========================================="
          echo "üöÄ INIT"
          echo "=========================================="
          echo "üì¶ App: ${APP_NAME}"
          echo "üß≠ Strategy: ${DEPLOY_STRATEGY}"
          echo "‚úÖ Entorno inicializado"
          echo ""

  # === WIRU: CHECK ===
  check:
    needs: init
    runs-on: ubuntu-latest
    steps:
      - name: Validar configuraci√≥n (CHECK)
        run: |
          echo "=========================================="
          echo "üîç CHECK"
          echo "=========================================="
          echo "üåç Environments: ${{ inputs.environments }}"
          echo "üîñ Branch: ${GITHUB_REF_NAME}"
          echo "‚úÖ Configuraci√≥n v√°lida"
          echo ""

  # === WIRU: TEST ===
  test:
    needs: check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Detectar stack y ejecutar tests (TEST)
        run: |
          echo "=========================================="
          echo "üß™ TEST"
          echo "=========================================="
          if [ -f "package.json" ]; then
            echo "üì¶ Node.js detectado"
            npm ci || true
            npm test --silent || true
          elif [ -f "requirements.txt" ]; then
            echo "üêç Python detectado"
            python -m pip install -r requirements.txt || true
            pytest -q || true
          else
            echo "‚ÑπÔ∏è Sin stack est√°ndar detectado, ejecutando smoke test"
            echo "ok"
          fi
          echo "‚úÖ Tests completados"
          echo ""

  # === WIRU: BUILD ===
  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build de la aplicaci√≥n (BUILD)
        run: |
          echo "=========================================="
          echo "üèóÔ∏è  BUILD"
          echo "=========================================="
          echo "üì¶ Compilando ${APP_NAME}..."
          # Placeholder: add npm run build / docker build / empaquetado
          echo "‚úÖ Build completado exitosamente"
          echo ""

  # === WIRU: DEPLOY (DEV) ===
  deploy-dev:
    if: |
      inputs.environments == 'full' || 
      inputs.environments == 'full-with-drp' ||
      inputs.environments == 'mid'
    needs: build
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Deploy a DEV (DEPLOY)
        run: |
          echo "=========================================="
          echo "üîß DEPLOY TO DEV"
          echo "=========================================="
          echo "üöÄ Desplegando ${APP_NAME} (strategy: ${DEPLOY_STRATEGY})..."
          echo "üåê URL: https://dev.example.com/${APP_NAME}"
          echo "‚úÖ DEV OK"
          echo ""

  # === WIRU: DEPLOY (STG) ===
  deploy-stg:
    if: inputs.environments != 'minimal'
    needs: [build]
    runs-on: ubuntu-latest
    environment: stg
    steps:
      - name: Deploy a STAGING (DEPLOY)
        run: |
          echo "=========================================="
          echo "üî® DEPLOY TO STAGING"
          echo "=========================================="
          echo "üöÄ Desplegando ${APP_NAME} (strategy: ${DEPLOY_STRATEGY})..."
          echo "üåê URL: https://stg.example.com/${APP_NAME}"
          echo "‚úÖ STAGING OK"
          echo ""

  # === WIRU: DEPLOY (PRD) ===
  deploy-prod:
    needs: [build]
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Deploy a PRODUCTION (DEPLOY)
        run: |
          echo "=========================================="
          echo "üöÄ DEPLOY TO PRODUCTION"
          echo "=========================================="
          echo "üöÄ Desplegando ${APP_NAME} (strategy: ${DEPLOY_STRATEGY})..."
          echo "üåê URL: https://prod.example.com/${APP_NAME}"
          echo "‚ö†Ô∏è  Monitoreando post-deploy..."
          echo "‚úÖ PRODUCTION OK"
          echo ""

  # === WIRU: DEPLOY (DRP) ===
  deploy-drp:
    if: inputs.environments == 'full-with-drp'
    needs: deploy-prod
    runs-on: ubuntu-latest
    environment: drp
    steps:
      - name: Deploy a DRP (Disaster Recovery)
        run: |
          echo "=========================================="
          echo "üõ°Ô∏è  DEPLOY TO DRP"
          echo "=========================================="
          echo "üöÄ Desplegando ${APP_NAME} a sitio DRP..."
          echo "üåê URL: https://drp.example.com/${APP_NAME}"
          echo "‚úÖ DRP OK"
          echo ""

  # === WIRU: NOTIFY / SUMMARY ===
  summary:
    needs: [deploy-dev, deploy-stg, deploy-prod, deploy-drp]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Resumen del deployment (NOTIFY)
        run: |
          echo "=========================================="
          echo "üìä RESUMEN FINAL"
          echo "=========================================="
          echo "‚úÖ Pipeline completado (con o sin skips)"
          echo "üì¶ App: ${APP_NAME}"
          echo "üåç Environments: ${{ inputs.environments }}"
          echo "üîÄ Strategy: ${DEPLOY_STRATEGY}"
          echo "‚è∞ Fecha: $(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          echo "=========================================="
