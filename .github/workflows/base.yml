name: WIRU Serverless POC

on:
  push:
  workflow_dispatch:
  workflow_call:
    inputs:
      app-name:
        description: 'Application name'
        required: false
        type: string
        default: 'my-app'
      stage:
        description: 'Stage: dev | stg'
        required: true
        type: string
      version:
        description: 'App version (semver, optional)'
        required: false
        type: string
        default: ''
      do-remove:
        description: 'Execute serverless remove (manual only)'
        required: false
        type: boolean
        default: false
      do-rollback:
        description: 'Execute serverless rollback (manual only)'
        required: false
        type: boolean
        default: false
      rollback-to:
        description: 'Rollback timestamp/ID (optional)'
        required: false
        type: string
        default: ''

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ inputs.app-name }}-${{ inputs.stage }}
  cancel-in-progress: false

env:
  APP_NAME: ${{ inputs.app-name }}
  STAGE: ${{ inputs.stage }}
  INPUT_VERSION: ${{ inputs.version }}

jobs:
  wiru:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: { target: [init, wversion] }
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        if: ${{ matrix.target == 'init' || matrix.target == 'wversion' }}
        uses: actions/setup-node@v4
        with: { node-version: '20' }
      - name: INIT
        if: ${{ matrix.target == 'init' }}
        shell: bash
        run: |
          echo "INIT"
          if [ -f package.json ]; then npm ci --silent || true; fi
          npm i -g serverless >/dev/null 2>&1 || true
      - name: VERSION CHECK
        if: ${{ matrix.target == 'wversion' }}
        shell: bash
        run: |
          echo "VERSION CHECK"
          if [ -n "${INPUT_VERSION}" ]; then
            if echo "${INPUT_VERSION}" | grep -Eq '^[0-9]+\.[0-9]+\.[0-9]+([-+][A-Za-z0-9\.:-]+)?$'; then
              echo "version ok: ${INPUT_VERSION}"
            else
              echo "invalid semver"; exit 1
            fi
          fi

  wtest:
    needs: wiru
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: { target: [unit-test, sonarqube] }
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        if: ${{ matrix.target == 'unit-test' || matrix.target == 'sonarqube' }}
        uses: actions/setup-node@v4
        with: { node-version: '20' }
      - name: Unit Tests
        if: ${{ matrix.target == 'unit-test' }}
        shell: bash
        run: |
          echo "UNIT TESTS"
          if [ -f package.json ]; then npm test --silent || echo "no tests"; else echo "smoke ok"; fi
      - name: SonarQube Analysis
        if: ${{ matrix.target == 'sonarqube' }}
        shell: bash
        run: |
          echo "SONAR (placeholder)"

  # --- DEPLOY: siempre habilitado tras tests ---
  wdeploy_deploy:
    needs: wtest
    runs-on: ubuntu-latest
    environment: ${{ inputs.stage }}
    steps:
      - uses: actions/checkout@v4
      - name: Deploy Serverless
        shell: bash
        run: |
          echo "DEPLOY ${STAGE} - ${APP_NAME}"
          # serverless deploy --stage "${STAGE}"
          echo "URL: https://${STAGE}.example.com/${APP_NAME}"

  # --- REMOVE: solo manual y con flag do-remove=true ---
  wdeploy_remove:
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.do-remove }}
    needs: wtest
    runs-on: ubuntu-latest
    environment: ${{ inputs.stage }}
    steps:
      - uses: actions/checkout@v4
      - name: Remove Serverless
        shell: bash
        run: |
          echo "REMOVE ${STAGE}"
          # serverless remove --stage "${STAGE}"

  # --- ROLLBACK: solo manual y con flag do-rollback=true ---
  wdeploy_rollback:
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.do-rollback }}
    needs: wtest
    runs-on: ubuntu-latest
    environment: ${{ inputs.stage }}
    steps:
      - uses: actions/checkout@v4
      - name: Rollback Serverless
        shell: bash
        run: |
          echo "ROLLBACK ${STAGE}"
          RB_TO="${{ inputs.rollback-to }}"
          if [ -n "${RB_TO}" ]; then
            echo "Rollback to: ${RB_TO}"
            # serverless rollback --stage "${STAGE}" --timestamp "${RB_TO}"
          else
            echo "Rollback to last deployment"
            # serverless rollback --stage "${STAGE}"
          fi
