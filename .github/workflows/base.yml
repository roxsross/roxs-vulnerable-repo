jobs:
  init:
    name: "winstall"
    runs-on: ubuntu-latest
    steps:
      - name: Simulate init
        run: |
          echo "ðŸ§° Initializing workflow..."
          echo "APP_NAME: ${APP_NAME}"
          echo "STAGE: ${STAGE}"
          echo "VERSION: ${INPUT_VERSION}"

  wversion:
    name: "wversion"
    needs: init
    runs-on: ubuntu-latest
    steps:
      - name: Semver check
        run: |
          if [ -n "${INPUT_VERSION}" ]; then
            if echo "${INPUT_VERSION}" | grep -Eq '^[0-9]+\.[0-9]+\.[0-9]+([-+][A-Za-z0-9\.:-]+)?$'; then
              echo "version ok: ${INPUT_VERSION}"
            else
              echo "invalid semver"; exit 1
            fi
          fi

  # Matrix de unit tests (validaciÃ³n multi-runtime) â€“ NO bloquea Sonar
  wtest_unit_matrix:
    name: "wtest (unit matrix)"
    needs: init
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v4


  # Job rÃ¡pido para generar cobertura una sola vez
  wtest_coverage:
    name: "wtest (coverage)"
    needs: init
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: '20' }
      - name: Generate coverage
        run: |
          echo "ðŸ§ª Generating coverage on Node 20..."
          # npm ci
          # npm run test:coverage
          mkdir -p coverage && echo "TN:\nSF:dummy\nDA:1,1\nend_of_record" > coverage/lcov.info
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/lcov.info
          retention-days: 1

  # Sonar depende SOLO de coverage â‡’ arranca sin esperar al matrix
  wsonar:
    name: "wsonar"
    needs: wtest_coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - uses: actions/setup-node@v4
        with: { node-version: '20' }
      - name: Download coverage
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: coverage
        continue-on-error: true
      - name: SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          echo "ðŸ“Š Running SonarQube analysis with coverage/ltcov.info..."
          # sonar-scanner ... -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info

  # Deploy exige que estÃ©n:
  #  - el anÃ¡lisis Sonar (wsonar)
  #  - y el matrix de unit tests completo (wtest_unit_matrix)
  wdeploy_deploy:
    name: "wsls deploy"
    needs: [wsonar, wtest_unit_matrix]
    runs-on: ubuntu-latest
    environment: ${{ inputs.stage }}
    steps:
      - uses: actions/checkout@v4
      - name: Deploy Serverless
        run: |
          echo "DEPLOY ${STAGE} - ${APP_NAME}"
          # serverless deploy --stage "${STAGE}"

  wdeploy_rollback:
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.do-rollback }}
    name: "wsls rollback"
    needs: [wsonar, wtest_unit_matrix]
    runs-on: ubuntu-latest
    environment: ${{ inputs.stage }}
    steps:
      - uses: actions/checkout@v4
      - name: Rollback Serverless
        run: |
          echo "ROLLBACK ${STAGE}"
          # serverless rollback ...

  wdeploy_remove:
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.do-remove }}
    name: "wsls remove"
    needs: [wsonar, wtest_unit_matrix]
    runs-on: ubuntu-latest
    environment: ${{ inputs.stage }}
    steps:
      - uses: actions/checkout@v4
      - name: Remove Serverless
        run: |
          echo "REMOVE ${STAGE}"
          # serverless remove --stage "${STAGE}"
