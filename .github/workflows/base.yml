name: WIRU Serverless POC

on:
  push:
  workflow_call:
    inputs:
      app-name:
        description: 'Application name'
        required: false
        type: string
        default: 'my-app'
      stage:
        description: 'Stage: dev | stg'
        required: true
        type: string
      version:
        description: 'App version (semver, optional)'
        required: false
        type: string
        default: ''
      do-remove:
        description: 'Execute serverless remove'
        required: false
        type: boolean
        default: false
      do-rollback:
        description: 'Execute serverless rollback'
        required: false
        type: boolean
        default: false
      rollback-to:
        description: 'Rollback timestamp/ID (optional)'
        required: false
        type: string
        default: ''

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ inputs.app-name }}-${{ inputs.stage }}
  cancel-in-progress: false

env:
  APP_NAME: ${{ inputs.app-name }}
  STAGE: ${{ inputs.stage }}
  INPUT_VERSION: ${{ inputs.version }}

jobs:
  init:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: install dependencies
        shell: bash
        run: |
          echo "INIT - install dependencies"
          if [ -f package.json ]; then
            npm ci --silent || true
          fi
          npm i -g serverless >/dev/null 2>&1 || true
          echo "INIT ok"

  check-version:
    needs: init
    runs-on: ubuntu-latest
    steps:
      - name: Version Checks (semver)
        shell: bash
        run: |
          echo "CHECK - version checks"
          echo "Stage: ${STAGE}"
          if [ "${STAGE}" = "prod" ]; then
            echo "Deploy to prod is not allowed in this POC"
            exit 1
          fi
          if [ -n "${INPUT_VERSION}" ]; then
            if echo "${INPUT_VERSION}" | grep -Eq '^[0-9]+\.[0-9]+\.[0-9]+([-+][A-Za-z0-9\.:-]+)?$'; then
              echo "Valid version: ${INPUT_VERSION}"
            else
              echo "Invalid version (use semver, e.g. 1.2.3)"
              exit 1
            fi
          else
            echo "No version provided, continuing..."
          fi
          echo "CHECK ok"

  quality:
    needs: check-version
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: [unit, sonar]
    env:
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        if: ${{ matrix.target == 'unit' || matrix.target == 'sonar' }}
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Unit Tests
        if: ${{ matrix.target == 'unit' }}
        shell: bash
        run: |
          echo "TEST - unit"
          if [ -f package.json ]; then
            npm ci --silent || true
            npm test --silent || echo "No tests configured"
          else
            echo "No Node project detected - smoke ok"
          fi
          echo "TEST ok"

      - name: Sonar Analysis
        if: ${{ matrix.target == 'sonar' }}
        shell: bash
        run: |
          echo "SONAR - analysis"
          if [ -z "${SONAR_HOST_URL}" ] || [ -z "${SONAR_TOKEN}" ]; then
            echo "Missing SONAR_HOST_URL or SONAR_TOKEN"
            exit 1
          fi
          SCANNER_DIR="${RUNNER_TEMP}/sonar-scanner"
          mkdir -p "${SCANNER_DIR}"
          curl -sLo "${SCANNER_DIR}/scanner.zip" https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-5.0.1.3006-linux.zip || true
          unzip -qq "${SCANNER_DIR}/scanner.zip" -d "${SCANNER_DIR}" || true
          export PATH="${SCANNER_DIR}/sonar-scanner-5.0.1.3006-linux/bin:${PATH}"

          if [ -f package.json ]; then
            npm ci --silent || true
            npm run test:coverage --silent || echo "No coverage script, continuing"
          fi

          sonar-scanner \
            -Dsonar.host.url="${SONAR_HOST_URL}" \
            -Dsonar.login="${SONAR_TOKEN}" \
            -Dsonar.projectKey="${SONAR_PROJECT_KEY:-${APP_NAME}}" || true

          echo "SONAR ok"

  deploy:
    needs: quality
    if: ${{ !inputs.do-remove && !inputs.do-rollback }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.stage }}
    steps:
      - uses: actions/checkout@v4
      - name: Deploy Serverless
        shell: bash
        run: |
          echo "DEPLOY - serverless ${STAGE}"
          echo "App: ${APP_NAME}"
          # serverless deploy --stage "${STAGE}"
          echo "URL example: https://${STAGE}.example.com/${APP_NAME}"
          echo "DEPLOY ok"

  remove:
    needs: quality
    if: ${{ inputs.do-remove }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.stage }}
    steps:
      - uses: actions/checkout@v4
      - name: Remove Serverless
        shell: bash
        run: |
          echo "REMOVE - serverless ${STAGE}"
          # serverless remove --stage "${STAGE}"
          echo "REMOVE ok"

  rollback:
    needs: quality
    if: ${{ inputs.do-rollback }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.stage }}
    steps:
      - uses: actions/checkout@v4
      - name: Rollback Serverless
        shell: bash
        run: |
          echo "ROLLBACK - serverless ${STAGE}"
          RB_TO="${{ inputs.rollback-to }}"
          if [ -n "${RB_TO}" ]; then
            echo "Rollback to: ${RB_TO}"
            # serverless rollback --stage "${STAGE}" --timestamp "${RB_TO}"
          else
            echo "Rollback to last deployment"
            # serverless rollback --stage "${STAGE}"
          fi
          echo "ROLLBACK ok"
