name: SAST Security Analysis

on:
  push:
    branches: [ vampi, main, master ]
  pull_request:
    branches: [ vampi, main, master ]
  schedule:
    - cron: '0 2 * * 1'

jobs:
  bandit-scan:
    name: Bandit Security Scan
    runs-on: ubuntu-latest
    continue-on-error: true
    
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Run Bandit
      run: |
        pip install bandit
        bandit -r . -f json -o bandit-report.json -ll -i || true
        cat bandit-report.json
        
    - name: Upload JSON
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-results-json
        path: bandit-report.json

  semgrep-scan:
    name: Semgrep Security Scan
    runs-on: ubuntu-latest
    continue-on-error: true
    
    steps:
    - uses: actions/checkout@v4
    - name: Run Semgrep
      run: |
        pip install semgrep
        semgrep --config=p/security-audit --config=p/secrets --config=p/python --config=p/flask --config=p/owasp-top-ten --json --output=semgrep-report.json . || true
        
    - name: Upload JSON
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: semgrep-results
        path: semgrep-report.json

  safety-scan:
    name: Safety Dependency Check
    runs-on: ubuntu-latest
    continue-on-error: true
    
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Run Safety CLI to check for vulnerabilities
      uses: pyupio/safety-action@v1
      with:
        api-key: ${{ secrets.SAFETY_API_KEY }}
        output-format: json
        args: --detailed-output --output-format json
      continue-on-error: true

    - name: Upload JSON
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: safety-results
        path: safety-report.json

  pip-audit-scan:
    name: Pip-Audit Vulnerability Scan
    runs-on: ubuntu-latest
    continue-on-error: true
    
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Run pip-audit
      run: |
        pip install pip-audit
        pip-audit -r requirements.txt --format=json --output=pip-audit-report.json || true
        
    - name: Upload JSON
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: pip-audit-results
        path: pip-audit-report.json

  gitleaks-scan:
    name: GitLeaks Secrets Scan
    runs-on: ubuntu-latest
    continue-on-error: true
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  trivy-fs-scan:
    name: Trivy Filesystem Scan
    runs-on: ubuntu-latest
    continue-on-error: true
    
    steps:
    - uses: actions/checkout@v4
    - name: Run Trivy FS Scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'json'
        output: 'trivy-fs-report.json'
        
    - name: Upload FS JSON
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: trivy-fs-results-json
        path: trivy-fs-report.json

  trivy-image-scan:
    name: Trivy Container Image Scan
    runs-on: ubuntu-latest
    continue-on-error: true
    
    steps:
    - uses: actions/checkout@v4
    - name: Build Docker Image
      run: |
        docker build -t vampi:latest .
        
    - name: Run Trivy Image Scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'image'
        image-ref: 'vampi:latest'
        format: 'json'
        output: 'trivy-image-report.json'
        
    - name: Upload Image JSON
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: trivy-image-results-json
        path: trivy-image-report.json