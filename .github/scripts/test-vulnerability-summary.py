#!/usr/bin/env python3
"""
Script de prueba para vulnerability-summary.py
Simula archivos de reportes para probar la funcionalidad
"""

import json
import os
import tempfile
import shutil
from pathlib import Path

def create_test_reports(test_dir):
    """Crea archivos de reportes de prueba"""
    
    # Bandit report
    bandit_data = {
        "metrics": {
            "test.py": {
                "SEVERITY.HIGH": 2,
                "SEVERITY.MEDIUM": 3,
                "SEVERITY.LOW": 1
            }
        },
        "results": [
            {"issue_severity": "HIGH"},
            {"issue_severity": "MEDIUM"}
        ]
    }
    
    # Semgrep report
    semgrep_data = {
        "results": [
            {
                "extra": {
                    "severity": "ERROR",
                    "metadata": {"impact": "HIGH"}
                }
            },
            {
                "extra": {
                    "severity": "WARNING"
                }
            },
            {
                "extra": {
                    "severity": "INFO"
                }
            }
        ]
    }
    
    # Trivy FS report
    trivy_fs_data = {
        "Results": [
            {
                "Vulnerabilities": [
                    {"Severity": "CRITICAL"},
                    {"Severity": "HIGH"},
                    {"Severity": "MEDIUM"},
                    {"Severity": "LOW"}
                ]
            }
        ]
    }
    
    # Trivy Image report
    trivy_image_data = {
        "Results": [
            {
                "Vulnerabilities": [
                    {"Severity": "CRITICAL"},
                    {"Severity": "CRITICAL"},
                    {"Severity": "HIGH"},
                    {"Severity": "MEDIUM"}
                ]
            }
        ]
    }
    
    # Crear archivos
    reports = {
        "bandit-report.json": bandit_data,
        "semgrep-report.json": semgrep_data,
        "trivy-fs-report.json": trivy_fs_data,
        "trivy-image-report.json": trivy_image_data
    }
    
    for filename, data in reports.items():
        with open(test_dir / filename, 'w') as f:
            json.dump(data, f, indent=2)
    
    print(f"‚úÖ Archivos de prueba creados en: {test_dir}")
    return list(reports.keys())

def main():
    """Funci√≥n principal de prueba"""
    # Crear directorio temporal
    test_dir = Path(tempfile.mkdtemp(prefix="security_test_"))
    
    try:
        print("üß™ Iniciando prueba de vulnerability-summary.py")
        print("=" * 50)
        
        # Crear archivos de prueba
        created_files = create_test_reports(test_dir)
        
        # Importar y ejecutar el analizador
        import sys
        script_dir = Path(__file__).parent
        sys.path.insert(0, str(script_dir))
        
        # Importar directamente el m√≥dulo
        import importlib.util
        spec = importlib.util.spec_from_file_location("vulnerability_summary", script_dir / "vulnerability-summary.py")
        vulnerability_summary = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(vulnerability_summary)
        
        VulnerabilityAnalyzer = vulnerability_summary.VulnerabilityAnalyzer
        
        # Crear analizador con directorio de prueba
        analyzer = VulnerabilityAnalyzer(test_dir)
        
        # Ejecutar an√°lisis
        analyzer.analyze_all_reports()
        analyzer.print_summary()
        
        print("\nüéâ Prueba completada exitosamente!")
        
    except Exception as e:
        print(f"‚ùå Error en la prueba: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        # Limpiar directorio temporal
        shutil.rmtree(test_dir)
        print(f"üßπ Directorio temporal eliminado: {test_dir}")

if __name__ == "__main__":
    main()